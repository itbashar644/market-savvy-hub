
import { log } from '../_shared/logger.ts';
import { serve } from 'https://deno.land/std@0.224.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';

const WB_API_URL = 'https://marketplace-api.wildberries.ru';

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { stocks, apiKey } = await req.json();

    if (!stocks || !Array.isArray(stocks)) {
      throw new Error('"stocks" array is required in the request body.');
    }
    
    if (!apiKey) {
      throw new Error('Wildberries API key is required in the request body.');
    }

    if (stocks.length === 0) {
      log('üîç –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return new Response(JSON.stringify({ result: [] }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    log('üöÄ ==> –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–°–¢–ê–¢–ö–û–í WB <==');
    log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', stocks.length);
    log('üîë API Key (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', apiKey.substring(0, 10) + '...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID
    log('üè¢ ==> –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤');
    
    let warehouseId = 7963; // ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let validWarehouseId = null;
    
    try {
      log('üè¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤...');
      const warehousesResponse = await fetch(`${WB_API_URL}/api/v3/warehouses`, {
        method: 'GET',
        headers: {
          'Authorization': apiKey,
          'User-Agent': 'Supabase-Edge-Function/1.0',
        },
        signal: AbortSignal.timeout(15000)
      });

      log('üè¢ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–∫–ª–∞–¥–æ–≤:', warehousesResponse.status);

      if (warehousesResponse.ok) {
        const warehousesData = await warehousesResponse.json();
        log('üè¢ ‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã:', JSON.stringify(warehousesData, null, 2));
        
        if (Array.isArray(warehousesData) && warehousesData.length > 0) {
          validWarehouseId = warehousesData[0].id;
          log(`üè¢ ‚úÖ –í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥ ID: ${validWarehouseId} (–Ω–∞–∑–≤–∞–Ω–∏–µ: ${warehousesData[0].name || 'N/A'})`);
        }
      } else {
        const errorText = await warehousesResponse.text();
        log('üè¢ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤. –ö–æ–¥:', warehousesResponse.status, '–¢–µ–∫—Å—Ç:', errorText);
      }
    } catch (warehouseError) {
      console.error('üè¢ üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤:', warehouseError);
    }

    const finalWarehouseId = validWarehouseId || warehouseId;
    log(`üè¢ üéØ –ò—Ç–æ–≥–æ–≤—ã–π ID —Å–∫–ª–∞–¥–∞: ${finalWarehouseId}`);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    log('üìã ==> –≠–¢–ê–ü 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    
    const validStocks = [];
    let invalidCount = 0;
    
    for (const item of stocks) {
      const skuStr = String(item.offer_id).trim();
      if (!/^\d+$/.test(skuStr)) {
        invalidCount++;
      } else {
        validStocks.push({
          ...item,
          offer_id: skuStr
        });
      }
    }

    log(`üìã üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –≤–∞–ª–∏–¥–Ω—ã—Ö ${validStocks.length}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö ${invalidCount} –∏–∑ ${stocks.length}`);

    if (validStocks.length === 0) {
      log('üìã ‚ùå –ù–ï–¢ –í–ê–õ–ò–î–ù–´–• –¢–û–í–ê–†–û–í –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      const allErrors = stocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'INVALID_SKU_FORMAT',
          message: `SKU ${item.offer_id} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è WB API
    log('üì§ ==> –≠–¢–ê–ü 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API');
    
    const wbPayload = {
      stocks: validStocks.map(item => ({
        sku: item.offer_id,
        amount: item.stock || 0,
        warehouseId: finalWarehouseId
      }))
    };

    log('üì§ üéØ PAYLOAD –¥–ª—è WB API (–ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞):');
    log(JSON.stringify({
      stocks: wbPayload.stocks.slice(0, 3)
    }, null, 2));
    log(`üì§ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ payload: ${wbPayload.stocks.length}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ WB API
    log('üåê ==> –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ WB API');
    log(`üåê URL: ${WB_API_URL}/api/v3/stocks/${finalWarehouseId}`);

    let response;
    let responseText = '';
    
    try {
      const startTime = Date.now();
      
      log('üåê üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í WB API...');
      
      response = await fetch(`${WB_API_URL}/api/v3/stocks/${finalWarehouseId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': apiKey,
          'User-Agent': 'Supabase-Edge-Function/1.0',
        },
        body: JSON.stringify(wbPayload),
        signal: AbortSignal.timeout(30000)
      });
      
      const requestTime = Date.now() - startTime;
      log(`üåê ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${requestTime}ms`);
      log('üåê üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ WB API:', response.status, response.statusText);
      
      responseText = await response.text();
      console.log('üåê üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ WB API (–¥–ª–∏–Ω–∞):', responseText.length);
      console.log('üåê üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ WB API:', responseText);
      
    } catch (fetchError) {
      console.error('üåê üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê –ö WB API:', fetchError);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'NETWORK_ERROR',
          message: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${fetchError.message}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ WB API
    log('üîç ==> –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê WB API');
    log(`üîç HTTP Status: ${response.status}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (HTTP 204)
    if (response.status === 204) {
      log('üîç ‚úÖ HTTP 204: –û—Å—Ç–∞—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (No Content)');
      
      const result = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: true,
        errors: []
      }));
      
      log('üîç üéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –¢–û–í–ê–†–´ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´');
      log('üîç üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', result.length);
      
      return new Response(JSON.stringify({ result }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    } 
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (HTTP 400)
    else if (response.status === 400) {
      log('üîç ‚ùå HTTP 400: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      let errorDetails = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö';
      
      try {
        if (responseText) {
          const parsedResponse = JSON.parse(responseText);
          log('üîç ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ 400:', JSON.stringify(parsedResponse, null, 2));
          
          if (parsedResponse.errors && Array.isArray(parsedResponse.errors)) {
            errorDetails = parsedResponse.errors.map((err: any) => 
              err.message || err.description || JSON.stringify(err)
            ).join('; ');
          } else if (parsedResponse.message) {
            errorDetails = parsedResponse.message;
          }
        }
      } catch (parseError) {
        log('üîç ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏:', parseError);
        errorDetails = responseText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
      }
      
      log('üîç ‚ùå –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorDetails);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'VALIDATION_ERROR',
          message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errorDetails}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - SKU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (HTTP 409)
    else if (response.status === 409) {
      log('üîç ‚ùå HTTP 409: –ö–æ–Ω—Ñ–ª–∏–∫—Ç - —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ');
      
      const result = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'SKU_NOT_FOUND',
          message: `SKU ${item.offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥, 2) –¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é, 3) SKU –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`
        }]
      }));
      
      log('üîç üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SKU');
      
      return new Response(JSON.stringify({ result }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (HTTP 401, 403)
    else if (response.status === 401 || response.status === 403) {
      console.error(`üîç üîê HTTP ${response.status}: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞`);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: `AUTH_ERROR_${response.status}`,
          message: `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (${response.status}): –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    else {
      console.error(`üîç üö´ HTTP ${response.status}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API`);
      console.error('üîç üö´ Response Body:', responseText);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: `HTTP_${response.status}`,
          message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API (${response.status}): ${responseText.substring(0, 200)}${responseText.length > 200 ? '...' : ''}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
  } catch (error) {
    console.error('üí• ==> –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –§–£–ù–ö–¶–ò–ò <==');
    console.error('üí• –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
    console.error('üí• –ù–∞–∑–≤–∞–Ω–∏–µ:', error.name);
    console.error('üí• –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('üí• Stack trace:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      errorType: error.name || 'UnknownError',
      errorStack: error.stack || 'No stack trace available'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});
