
import { serve } from 'https://deno.land/std@0.224.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';

const WB_API_URL = 'https://marketplace-api.wildberries.ru';

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { stocks, apiKey } = await req.json();

    if (!stocks || !Array.isArray(stocks)) {
      throw new Error('"stocks" array is required in the request body.');
    }
    
    if (!apiKey) {
      throw new Error('Wildberries API key is required in the request body.');
    }

    if (stocks.length === 0) {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return new Response(JSON.stringify({ result: [] }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    console.log('üöÄ ==> –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–°–¢–ê–¢–ö–û–í WB <==');
    console.log('üìä –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤:', stocks.length, '—Ç–æ–≤–∞—Ä–æ–≤');
    console.log('üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(stocks, null, 2));
    console.log('üîë API Key (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', apiKey.substring(0, 10) + '...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID
    console.log('üè¢ ==> –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤');
    
    let warehouseId = 7963; // ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let validWarehouseId = null;
    let warehousesData = null;
    
    try {
      console.log('üè¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤...');
      const warehousesResponse = await fetch(`${WB_API_URL}/api/v3/warehouses`, {
        method: 'GET',
        headers: {
          'Authorization': apiKey,
          'User-Agent': 'Supabase-Edge-Function/1.0',
        },
        signal: AbortSignal.timeout(30000)
      });

      console.log('üè¢ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–∫–ª–∞–¥–æ–≤:', warehousesResponse.status);
      console.log('üè¢ Headers –æ—Ç–≤–µ—Ç–∞ —Å–∫–ª–∞–¥–æ–≤:', Object.fromEntries(warehousesResponse.headers.entries()));

      if (warehousesResponse.ok) {
        warehousesData = await warehousesResponse.json();
        console.log('üè¢ ‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã:', JSON.stringify(warehousesData, null, 2));
        
        if (Array.isArray(warehousesData) && warehousesData.length > 0) {
          validWarehouseId = warehousesData[0].id;
          console.log(`üè¢ ‚úÖ –í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥ ID: ${validWarehouseId} (–Ω–∞–∑–≤–∞–Ω–∏–µ: ${warehousesData[0].name || 'N/A'})`);
        } else {
          console.log('üè¢ ‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }
      } else {
        const errorText = await warehousesResponse.text();
        console.log('üè¢ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤. –ö–æ–¥:', warehousesResponse.status);
        console.log('üè¢ ‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      }
    } catch (warehouseError) {
      console.error('üè¢ üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤:', warehouseError);
    }

    const finalWarehouseId = validWarehouseId || warehouseId;
    console.log(`üè¢ üéØ –ò—Ç–æ–≥–æ–≤—ã–π ID —Å–∫–ª–∞–¥–∞: ${finalWarehouseId}`);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('üìã ==> –≠–¢–ê–ü 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    
    const validStocks = [];
    const invalidStocks = [];
    
    for (let i = 0; i < stocks.length; i++) {
      const item = stocks[i];
      console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${stocks.length}:`, JSON.stringify(item, null, 2));
      
      const skuNumber = parseInt(item.offer_id);
      if (isNaN(skuNumber)) {
        console.warn(`üìã ‚ùå –¢–æ–≤–∞—Ä ${i + 1}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SKU: "${item.offer_id}" (—Ç–∏–ø: ${typeof item.offer_id})`);
        invalidStocks.push({
          ...item,
          error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SKU: ${item.offer_id}`
        });
      } else {
        const validItem = {
          ...item,
          offer_id: skuNumber.toString()
        };
        console.log(`üìã ‚úÖ –¢–æ–≤–∞—Ä ${i + 1}: SKU –≤–∞–ª–∏–¥–µ–Ω: ${validItem.offer_id}, –æ—Å—Ç–∞—Ç–æ–∫: ${validItem.stock}`);
        validStocks.push(validItem);
      }
    }

    console.log(`üìã üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –≤–∞–ª–∏–¥–Ω—ã—Ö ${validStocks.length}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö ${invalidStocks.length} –∏–∑ ${stocks.length}`);

    if (validStocks.length === 0) {
      console.log('üìã ‚ùå –ù–ï–¢ –í–ê–õ–ò–î–ù–´–• –¢–û–í–ê–†–û–í –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      const allErrors = stocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'INVALID_SKU_FORMAT',
          message: `SKU ${item.offer_id} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è WB API
    console.log('üì§ ==> –≠–¢–ê–ü 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API');
    
    const wbPayload = {
      stocks: validStocks.map((item, index) => {
        const stockItem = {
          sku: item.offer_id,
          amount: item.stock || 0,
          warehouseId: finalWarehouseId
        };
        console.log(`üì§ –¢–æ–≤–∞—Ä ${index + 1}: SKU=${stockItem.sku}, –æ—Å—Ç–∞—Ç–æ–∫=${stockItem.amount}, —Å–∫–ª–∞–¥ID=${stockItem.warehouseId}`);
        return stockItem;
      })
    };

    console.log('üì§ üéØ –ò–¢–û–ì–û–í–´–ô PAYLOAD –¥–ª—è WB API:');
    console.log(JSON.stringify(wbPayload, null, 2));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ WB API
    console.log('üåê ==> –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ WB API');
    console.log(`üåê URL: ${WB_API_URL}/api/v3/stocks/${finalWarehouseId}`);
    console.log(`üåê Method: PUT`);
    console.log(`üåê Headers: Content-Type: application/json, Authorization: ${apiKey.substring(0, 10)}...`);

    let response;
    let responseText = '';
    
    try {
      const startTime = Date.now();
      
      response = await fetch(`${WB_API_URL}/api/v3/stocks/${finalWarehouseId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': apiKey,
          'User-Agent': 'Supabase-Edge-Function/1.0',
        },
        body: JSON.stringify(wbPayload),
        signal: AbortSignal.timeout(30000)
      });
      
      const requestTime = Date.now() - startTime;
      console.log(`üåê ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${requestTime}ms`);
      console.log('üåê üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      console.log('üåê üì° Status Text:', response.statusText);
      console.log('üåê üì° Headers –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));
      
      responseText = await response.text();
      console.log('üåê üìÑ –ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:');
      console.log(responseText);
      
    } catch (fetchError) {
      console.error('üåê üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–¢–ò:', fetchError);
      console.error('üåê üí• –¢–∏–ø –æ—à–∏–±–∫–∏:', fetchError.name);
      console.error('üåê üí• –°–æ–æ–±—â–µ–Ω–∏–µ:', fetchError.message);
      console.error('üåê üí• Stack:', fetchError.stack);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'NETWORK_ERROR',
          message: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${fetchError.message}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
    console.log('üîç ==> –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ WB API');
    console.log(`üîç HTTP Status: ${response.status} (${response.statusText})`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (response.status === 204) {
      console.log('üîç ‚úÖ HTTP 204: –û—Å—Ç–∞—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (No Content)');
      console.log('üîç ‚úÖ –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ WB API –ø—Ä–∏–Ω—è–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å');
      
      const result = validStocks.map((item, index) => {
        console.log(`üîç ‚úÖ –¢–æ–≤–∞—Ä ${index + 1}: SKU ${item.offer_id} - –û–ë–ù–û–í–õ–ï–ù`);
        return {
          offer_id: item.offer_id,
          updated: true,
          errors: []
        };
      });
      
      console.log('üîç üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –¢–û–í–ê–†–´ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´');
      console.log('üîç üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', result.length);
      
      return new Response(JSON.stringify({ result }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    } 
    
    else if (response.status === 400) {
      console.log('üîç ‚ùå HTTP 400: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
      let errorDetails = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö';
      let parsedResponse = null;
      
      try {
        if (responseText) {
          parsedResponse = JSON.parse(responseText);
          console.log('üîç ‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ 400:', JSON.stringify(parsedResponse, null, 2));
          
          if (parsedResponse.errors && Array.isArray(parsedResponse.errors)) {
            errorDetails = parsedResponse.errors.map((err: any) => {
              console.log('üîç ‚ùå –û—à–∏–±–∫–∞:', err);
              return err.message || err.description || JSON.stringify(err);
            }).join('; ');
          } else if (parsedResponse.message) {
            errorDetails = parsedResponse.message;
          }
        }
      } catch (parseError) {
        console.log('üîç ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏:', parseError);
        errorDetails = responseText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
      }
      
      console.log('üîç ‚ùå –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorDetails);
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: 'VALIDATION_ERROR',
          message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errorDetails}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    else if (response.status === 409) {
      console.log('üîç ‚ùå HTTP 409: –ö–æ–Ω—Ñ–ª–∏–∫—Ç - —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ');
      console.log('üîç ‚ùå –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ SKU –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ WB');
      
      let conflictDetails = '';
      try {
        if (responseText) {
          const parsedResponse = JSON.parse(responseText);
          console.log('üîç ‚ùå –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞:', JSON.stringify(parsedResponse, null, 2));
          conflictDetails = JSON.stringify(parsedResponse);
        }
      } catch (e) {
        conflictDetails = responseText;
      }
      
      const result = validStocks.map((item, index) => {
        console.log(`üîç ‚ùå –¢–æ–≤–∞—Ä ${index + 1}: SKU ${item.offer_id} - –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–∞—Ç–∞–ª–æ–≥–µ WB`);
        return {
          offer_id: item.offer_id,
          updated: false,
          errors: [{
            code: 'SKU_NOT_FOUND',
            message: `SKU ${item.offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é.`
          }]
        };
      });
      
      console.log('üîç üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ SKU');
      
      return new Response(JSON.stringify({ result }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    else if (response.status === 401 || response.status === 403) {
      console.error(`üîç üîê HTTP ${response.status}: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
      console.error('üîç üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
      console.error('üîç üîê API Key (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', apiKey.substring(0, 10) + '...');
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: `AUTH_ERROR_${response.status}`,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.'
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
    else {
      // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
      console.error(`üîç üö´ HTTP ${response.status}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞`);
      console.error('üîç üö´ Status Text:', response.statusText);
      console.error('üîç üö´ Response Body:', responseText);
      console.error('üîç üö´ Response Headers:', Object.fromEntries(response.headers.entries()));
      
      const allErrors = validStocks.map(item => ({
        offer_id: item.offer_id,
        updated: false,
        errors: [{
          code: `HTTP_${response.status}`,
          message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API (${response.status}): ${responseText.substring(0, 200)}`
        }]
      }));
      
      return new Response(JSON.stringify({ result: allErrors }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }
    
  } catch (error) {
    console.error('üí• ==> –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –§–£–ù–ö–¶–ò–ò <==');
    console.error('üí• –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
    console.error('üí• –ù–∞–∑–≤–∞–Ω–∏–µ:', error.name);
    console.error('üí• –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('üí• Stack trace:', error.stack);
    console.error('üí• –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      errorType: error.name || 'UnknownError',
      errorStack: error.stack || 'No stack trace available'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});
