
-- Create a table to store marketplace credentials for each user
CREATE TABLE public.marketplace_credentials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  marketplace TEXT NOT NULL,
  api_key TEXT,
  client_id TEXT,
  warehouse_id TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  UNIQUE (user_id, marketplace)
);

-- Add comments to explain the purpose of the table and columns
COMMENT ON TABLE public.marketplace_credentials IS 'Stores API credentials for different marketplaces, linked to a user.';
COMMENT ON COLUMN public.marketplace_credentials.user_id IS 'Foreign key to the user this credential belongs to.';
COMMENT ON COLUMN public.marketplace_credentials.marketplace IS 'Name of the marketplace (e.g., Ozon, Wildberries).';
COMMENT ON COLUMN public.marketplace_credentials.api_key IS 'The API key for the marketplace.';
COMMENT ON COLUMN public.marketplace_credentials.client_id IS 'The Client ID, if required by the marketplace (e.g., Ozon).';
COMMENT ON COLUMN public.marketplace_credentials.warehouse_id IS 'The Warehouse ID for stock synchronization.';

-- Enable Row Level Security to ensure users can only access their own credentials
ALTER TABLE public.marketplace_credentials ENABLE ROW LEVEL SECURITY;

-- Create RLS policy for selecting credentials
CREATE POLICY "Users can view their own credentials"
ON public.marketplace_credentials FOR SELECT
USING (auth.uid() = user_id);

-- Create RLS policy for inserting credentials
CREATE POLICY "Users can insert their own credentials"
ON public.marketplace_credentials FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Create RLS policy for updating credentials
CREATE POLICY "Users can update their own credentials"
ON public.marketplace_credentials FOR UPDATE
USING (auth.uid() = user_id);

-- Create RLS policy for deleting credentials
CREATE POLICY "Users can delete their own credentials"
ON public.marketplace_credentials FOR DELETE
USING (auth.uid() = user_id);

-- Create a trigger to automatically update the 'updated_at' timestamp on any change
CREATE TRIGGER on_marketplace_credentials_updated
BEFORE UPDATE ON public.marketplace_credentials
FOR EACH ROW
EXECUTE PROCEDURE public.set_updated_at();
