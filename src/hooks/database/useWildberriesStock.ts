
import { useState, useEffect, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export interface WildberriesStockItem {
  id: string;
  product_id: string;
  internal_sku: string;
  wildberries_sku: string;
  stock_quantity: number;
  last_updated: string;
  created_at: string;
  updated_at: string;
}

export const useWildberriesStock = () => {
  const [stockItems, setStockItems] = useState<WildberriesStockItem[]>([]);
  const [loading, setLoading] = useState(true);
  const subscriptionRef = useRef<any>(null);
  const isMountedRef = useRef(true);

  const fetchStockItems = async () => {
    try {
      console.log('üîç [useWildberriesStock] –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ WB –∏–∑ Supabase...');
      const { data, error } = await supabase
        .from('wildberries_stock')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå [useWildberriesStock] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ WB:', error);
        throw error;
      }

      console.log('‚úÖ [useWildberriesStock] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ WB:', data?.length || 0);
      
      if (isMountedRef.current) {
        setStockItems(data || []);
      }
      
      return data || [];
    } catch (error) {
      console.error('üí• [useWildberriesStock] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries');
      return [];
    } finally {
      if (isMountedRef.current) {
        setLoading(false);
      }
    }
  };

  const addOrUpdateStockItem = async (data: {
    product_id?: string;
    internal_sku: string;
    wildberries_sku: string;
    stock_quantity: number;
  }) => {
    try {
      console.log('üîÑ [useWildberriesStock] –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ WB:', data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º internal_sku
      const { data: existing } = await supabase
        .from('wildberries_stock')
        .select('*')
        .eq('internal_sku', data.internal_sku)
        .single();

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const { error } = await supabase
          .from('wildberries_stock')
          .update({
            wildberries_sku: data.wildberries_sku,
            stock_quantity: data.stock_quantity,
            last_updated: new Date().toISOString()
          })
          .eq('id', existing.id);

        if (error) throw error;
        console.log('‚úÖ [useWildberriesStock] –û—Å—Ç–∞—Ç–æ–∫ WB –æ–±–Ω–æ–≤–ª–µ–Ω:', existing.id);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const { error } = await supabase
          .from('wildberries_stock')
          .insert({
            product_id: data.product_id,
            internal_sku: data.internal_sku,
            wildberries_sku: data.wildberries_sku,
            stock_quantity: data.stock_quantity
          });

        if (error) throw error;
        console.log('‚úÖ [useWildberriesStock] –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ WB –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      await fetchStockItems();
      return true;
    } catch (error) {
      console.error('‚ùå [useWildberriesStock] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ WB:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ Wildberries');
      return false;
    }
  };

  const bulkUpdateFromSkuMapping = async (skuMappings: Array<{ internal_sku: string; wildberries_sku: string }>) => {
    try {
      console.log('üì¶ [useWildberriesStock] –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SKU WB:', skuMappings.length);
      
      const results = { success: 0, failed: 0 };
      
      for (const mapping of skuMappings) {
        try {
          // –ò—â–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ inventory –ø–æ internal_sku (article_number)
          const { data: inventoryItem } = await supabase
            .from('inventory')
            .select('current_stock')
            .eq('sku', mapping.internal_sku)
            .single();

          const currentStock = inventoryItem?.current_stock || 0;
          console.log(`üìã [useWildberriesStock] –ù–∞–π–¥–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è ${mapping.internal_sku}: ${currentStock}`);

          await addOrUpdateStockItem({
            internal_sku: mapping.internal_sku,
            wildberries_sku: mapping.wildberries_sku,
            stock_quantity: currentStock
          });
          results.success++;
        } catch (error) {
          console.error(`‚ùå [useWildberriesStock] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${mapping.internal_sku}:`, error);
          results.failed++;
        }
      }
      
      console.log('üìä [useWildberriesStock] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', results);
      return results;
    } catch (error) {
      console.error('üí• [useWildberriesStock] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  };

  const updateStockQuantity = async (id: string, newQuantity: number) => {
    try {
      console.log(`üîÑ [useWildberriesStock] –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ${id}:`, newQuantity);
      
      const { error } = await supabase
        .from('wildberries_stock')
        .update({
          stock_quantity: newQuantity,
          last_updated: new Date().toISOString()
        })
        .eq('id', id);

      if (error) throw error;
      
      await fetchStockItems();
      console.log('‚úÖ [useWildberriesStock] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå [useWildberriesStock] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      return false;
    }
  };

  const deleteStockItem = async (id: string) => {
    try {
      console.log(`üóëÔ∏è [useWildberriesStock] –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ WB ${id}...`);
      const { error } = await supabase
        .from('wildberries_stock')
        .delete()
        .eq('id', id);

      if (error) throw error;

      await fetchStockItems();
      toast.success('–û—Å—Ç–∞—Ç–æ–∫ Wildberries —É–¥–∞–ª–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå [useWildberriesStock] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ WB:', error);
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ Wildberries');
      return false;
    }
  };

  useEffect(() => {
    isMountedRef.current = true;
    
    const initializeStockItems = async () => {
      await fetchStockItems();
    };
    
    initializeStockItems();
    
    return () => {
      isMountedRef.current = false;
      if (subscriptionRef.current) {
        console.log('üîÑ [useWildberriesStock] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞:', subscriptionRef.current);
        subscriptionRef.current.unsubscribe();
        subscriptionRef.current = null;
      }
    };
  }, []);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (stockItems.length >= 0 && !subscriptionRef.current) {
      const channelName = `wildberries-stock-realtime-${Math.random().toString(36).substr(2, 9)}`;
      console.log('üîÑ [useWildberriesStock] –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', channelName);
      
      subscriptionRef.current = supabase
        .channel(channelName)
        .on('postgres_changes', 
          { event: '*', schema: 'public', table: 'wildberries_stock' },
          (payload) => {
            console.log('üîÑ [useWildberriesStock] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ wildberries_stock:', payload);
            if (isMountedRef.current) {
              fetchStockItems();
            }
          }
        )
        .subscribe();
    }
  }, [stockItems.length]);

  return {
    stockItems,
    loading,
    addOrUpdateStockItem,
    bulkUpdateFromSkuMapping,
    updateStockQuantity,
    deleteStockItem,
    refreshStockItems: fetchStockItems
  };
};
