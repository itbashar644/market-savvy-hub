
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export interface WildberriesStockItem {
  id: string;
  product_id: string;
  internal_sku: string;
  wildberries_sku: string;
  stock_quantity: number;
  last_updated: string;
  created_at: string;
  updated_at: string;
}

export const useWildberriesStockOperations = () => {
  const addOrUpdateStockItem = async (data: {
    product_id?: string;
    internal_sku: string;
    wildberries_sku: string;
    stock_quantity: number;
  }) => {
    try {
      console.log('üîÑ [WildberriesStockOperations] –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ WB:', data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º internal_sku
      const { data: existing } = await supabase
        .from('wildberries_stock')
        .select('*')
        .eq('internal_sku', data.internal_sku)
        .single();

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const { error } = await supabase
          .from('wildberries_stock')
          .update({
            wildberries_sku: data.wildberries_sku,
            stock_quantity: data.stock_quantity,
            last_updated: new Date().toISOString()
          })
          .eq('id', existing.id);

        if (error) throw error;
        console.log('‚úÖ [WildberriesStockOperations] –û—Å—Ç–∞—Ç–æ–∫ WB –æ–±–Ω–æ–≤–ª–µ–Ω:', existing.id);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const { error } = await supabase
          .from('wildberries_stock')
          .insert({
            product_id: data.product_id,
            internal_sku: data.internal_sku,
            wildberries_sku: data.wildberries_sku,
            stock_quantity: data.stock_quantity
          });

        if (error) throw error;
        console.log('‚úÖ [WildberriesStockOperations] –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ WB –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      return true;
    } catch (error) {
      console.error('‚ùå [WildberriesStockOperations] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ WB:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ Wildberries');
      return false;
    }
  };

  const updateStockQuantity = async (id: string, newQuantity: number) => {
    try {
      console.log(`üîÑ [WildberriesStockOperations] –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ${id}:`, newQuantity);
      
      const { error } = await supabase
        .from('wildberries_stock')
        .update({
          stock_quantity: newQuantity,
          last_updated: new Date().toISOString()
        })
        .eq('id', id);

      if (error) throw error;
      
      console.log('‚úÖ [WildberriesStockOperations] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå [WildberriesStockOperations] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      return false;
    }
  };

  const deleteStockItem = async (id: string) => {
    try {
      console.log(`üóëÔ∏è [WildberriesStockOperations] –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ WB ${id}...`);
      const { error } = await supabase
        .from('wildberries_stock')
        .delete()
        .eq('id', id);

      if (error) throw error;

      toast.success('–û—Å—Ç–∞—Ç–æ–∫ Wildberries —É–¥–∞–ª–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå [WildberriesStockOperations] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ WB:', error);
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ Wildberries');
      return false;
    }
  };

  return {
    addOrUpdateStockItem,
    updateStockQuantity,
    deleteStockItem
  };
};
