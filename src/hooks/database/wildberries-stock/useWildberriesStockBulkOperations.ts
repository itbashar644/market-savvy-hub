
import { supabase } from '@/integrations/supabase/client';
import { useWildberriesStockOperations } from './useWildberriesStockOperations';

export const useWildberriesStockBulkOperations = () => {
  const { addOrUpdateStockItem } = useWildberriesStockOperations();

  const bulkUpdateFromSkuMapping = async (skuMappings: Array<{ internal_sku: string; wildberries_sku: string }>) => {
    try {
      console.log('üì¶ [WildberriesStockBulkOperations] –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SKU WB:', skuMappings.length);
      
      const results = { success: 0, failed: 0 };
      
      for (const mapping of skuMappings) {
        try {
          // –ò—â–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ inventory –ø–æ internal_sku (article_number)
          const { data: inventoryItem } = await supabase
            .from('inventory')
            .select('current_stock')
            .eq('sku', mapping.internal_sku)
            .single();

          const currentStock = inventoryItem?.current_stock || 0;
          console.log(`üìã [WildberriesStockBulkOperations] –ù–∞–π–¥–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è ${mapping.internal_sku}: ${currentStock}`);

          await addOrUpdateStockItem({
            internal_sku: mapping.internal_sku,
            wildberries_sku: mapping.wildberries_sku,
            stock_quantity: currentStock
          });
          results.success++;
        } catch (error) {
          console.error(`‚ùå [WildberriesStockBulkOperations] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${mapping.internal_sku}:`, error);
          results.failed++;
        }
      }
      
      console.log('üìä [WildberriesStockBulkOperations] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', results);
      return results;
    } catch (error) {
      console.error('üí• [WildberriesStockBulkOperations] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  };

  return {
    bulkUpdateFromSkuMapping
  };
};
