
import { toast } from 'sonner';
import { useSyncLogs } from './useSyncLogs';
import { useMarketplaceCredentials } from './useMarketplaceCredentials';
import { useWildberriesStockValidator, ProductForUpdate } from '../marketplace/useWildberriesStockValidator';
import { useWildberriesApiClient, SkuUpdateResult } from '../marketplace/useWildberriesApiClient';

export const useWildberriesStockUpdate = () => {
  const { addSyncLog } = useSyncLogs();
  const { credentials } = useMarketplaceCredentials();
  const { validateAndFilterProducts } = useWildberriesStockValidator();
  const { updateStocksApi } = useWildberriesApiClient();

  const createDetailedLog = async (
    validProducts: any[],
    skuResults: SkuUpdateResult[],
    executionTime: number,
    isError: boolean = false,
    errorMessage?: string
  ) => {
    const successCount = skuResults.filter(r => r.status === 'updated').length;
    const errorCount = skuResults.filter(r => r.status !== 'updated').length;
    const isCompleteFailure = successCount === 0;

    await addSyncLog({
      marketplace: 'Wildberries',
      operation: 'stock_update',
      status: isError || isCompleteFailure ? 'error' : 'success',
      message: isError 
        ? errorMessage || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤'
        : isCompleteFailure 
          ? `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries (${errorCount} –æ—à–∏–±–æ–∫)`
          : `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
      executionTime,
      metadata: {
        updatedCount: successCount,
        errorCount: errorCount,
        productsCount: validProducts.length,
        skuResults: skuResults,
        detailedResults: skuResults
      }
    });
  };

  const updateStock = async (products: ProductForUpdate[]) => {
    const startTime = Date.now();
    
    try {
      const wbCreds = credentials['Wildberries'];
      
      if (!wbCreds?.api_key) {
        const errorMsg = 'Wildberries API key not found. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
        console.error('‚ùå', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('üîë Wildberries API key found, preparing request...');

      const { validProducts, invalidCount } = validateAndFilterProducts(products);

      if (validProducts.length === 0) {
        console.log('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        toast.error('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤');
        
        await addSyncLog({
          marketplace: 'Wildberries',
          operation: 'stock_update',
          status: 'error',
          message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
          executionTime: Date.now() - startTime,
          metadata: {
            updatedCount: 0,
            errorCount: 0,
            productsCount: products.length,
            filteredOutCount: invalidCount
          }
        });
        return;
      }

      const skuResults = await updateStocksApi(validProducts, wbCreds.api_key);
      const executionTime = Date.now() - startTime;

      await createDetailedLog(validProducts, skuResults, executionTime);

      const successCount = skuResults.filter(r => r.status === 'updated').length;
      const errorCount = skuResults.filter(r => r.status !== 'updated').length;
      const isCompleteFailure = successCount === 0;

      if (isCompleteFailure) {
        toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
          description: `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries (${errorCount} —Ç–æ–≤–∞—Ä–æ–≤). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.`
        });
        
        throw new Error(`–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries. –í—Å–µ ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.`);
      } else {
        toast.success(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ Wildberries –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (${successCount} –∏–∑ ${skuResults.length} —Ç–æ–≤–∞—Ä–æ–≤)`, {
          description: errorCount > 0 ? `–û—à–∏–±–æ–∫: ${errorCount}` : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        });
      }
    } catch (error) {
      const executionTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error('üí• Wildberries stock update error:', error);
      
      await addSyncLog({
        marketplace: 'Wildberries',
        operation: 'stock_update',
        status: 'error',
        message: errorMessage,
        executionTime,
        metadata: { 
          error: errorMessage, 
          productsCount: products.length,
          errorDetails: error instanceof Error ? error.stack : undefined
        }
      });

      if (!errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')) {
        toast.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries', {
          description: errorMessage
        });
      }
      throw error;
    }
  };

  return { updateStock };
};
