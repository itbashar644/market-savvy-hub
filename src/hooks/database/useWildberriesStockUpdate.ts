
import { toast } from 'sonner';
import { useSyncLogs } from './useSyncLogs';
import { useMarketplaceCredentials } from './useMarketplaceCredentials';

export const useWildberriesStockUpdate = () => {
  const { addSyncLog } = useSyncLogs();
  const { credentials } = useMarketplaceCredentials();

  const updateStock = async (products: any[]) => {
    const startTime = Date.now();
    
    console.log('üöÄ [FRONTEND] ===== –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–°–¢–ê–¢–ö–û–í WB =====');
    console.log('üöÄ [FRONTEND] –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', products.length);
    console.log('üöÄ [FRONTEND] –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤:', products.slice(0, 3));
    
    try {
      const wbCreds = credentials['Wildberries'];
      
      if (!wbCreds?.api_key) {
        const errorMsg = 'Wildberries API key not found. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
        console.error('‚ùå [FRONTEND]', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('üîë [FRONTEND] Wildberries API key –Ω–∞–π–¥–µ–Ω');
      console.log('üîë [FRONTEND] API key (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', wbCreds.api_key.substring(0, 10) + '...');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø–∏–º —Ç–æ–≤–∞—Ä—ã —Å Wildberries SKU
      console.log('üìã [FRONTEND] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤...');
      
      const validProducts = [];
      const invalidProducts = [];
      
      for (let i = 0; i < products.length; i++) {
        const p = products[i];
        console.log(`üìã [FRONTEND] –¢–æ–≤–∞—Ä ${i + 1}/${products.length}:`, {
          sku: p.sku,
          offer_id: p.offer_id,  
          wildberries_sku: p.wildberries_sku,
          nm_id: p.nm_id,
          stock: p.stock,
          currentStock: p.currentStock,
          name: p.name
        });
        
        const hasWbSku = p.wildberries_sku || p.nm_id || p.offer_id;
        if (!hasWbSku) {
          console.log(`‚ö†Ô∏è [FRONTEND] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ${p.sku} - –Ω–µ—Ç Wildberries SKU`);
          invalidProducts.push(p);
        } else {
          console.log(`‚úÖ [FRONTEND] –¢–æ–≤–∞—Ä ${p.sku} –≤–∞–ª–∏–¥–µ–Ω, WB SKU: ${hasWbSku}`);
          validProducts.push(p);
        }
      }

      console.log(`üìä [FRONTEND] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –≤–∞–ª–∏–¥–Ω—ã—Ö ${validProducts.length}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö ${invalidProducts.length}`);

      if (validProducts.length === 0) {
        console.log('‚ùå [FRONTEND] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        toast.error('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.log('üì§ [FRONTEND] –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Edge Function...');
      
      const requestData = { 
        stocks: validProducts.map((p, index) => {
          const wbSku = p.wildberries_sku || p.nm_id || p.offer_id;
          const stock = p.stock || p.currentStock || 0;
          
          const stockItem = {
            offer_id: String(wbSku),
            stock: stock
          };
          
          console.log(`üì§ [FRONTEND] –¢–æ–≤–∞—Ä ${index + 1}: offer_id=${stockItem.offer_id}, stock=${stockItem.stock}`);
          return stockItem;
        }),
        apiKey: wbCreds.api_key
      };

      console.log('üì§ [FRONTEND] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:');
      console.log(JSON.stringify(requestData, null, 2));

      console.log('üåê [FRONTEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Edge Function...');
      console.log('üåê [FRONTEND] URL: https://lpwvhyawvxibtuxfhitx.supabase.co/functions/v1/wildberries-stock-sync');

      const fetchStartTime = Date.now();
      
      const response = await fetch('https://lpwvhyawvxibtuxfhitx.supabase.co/functions/v1/wildberries-stock-sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxwd3ZoeWF3dnhpYnR1eGZoaXR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MzIyOTUsImV4cCI6MjA2MjEwODI5NX0.-2aL1s3lUq4Oeos9jWoEd0Fn1g_-_oaQ_QWVEDByaOI`,
        },
        body: JSON.stringify(requestData),
      });

      const fetchTime = Date.now() - fetchStartTime;
      console.log(`üåê [FRONTEND] –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${fetchTime}ms`);
      console.log('üåê [FRONTEND] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
      console.log('üåê [FRONTEND] Headers –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [FRONTEND] HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
        console.error('‚ùå [FRONTEND] –¢–µ–ª–æ –æ—à–∏–±–∫–∏:', errorText);
        
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        
        try {
          const errorJson = JSON.parse(errorText);
          if (errorJson.error) {
            errorMessage = errorJson.error;
          }
        } catch (e) {
          errorMessage = errorText || errorMessage;
        }
        
        throw new Error(errorMessage);
      }

      const result = await response.json();
      console.log('üì® [FRONTEND] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Edge Function:');
      console.log(JSON.stringify(result, null, 2));
      
      const executionTime = Date.now() - startTime;
      console.log(`‚è±Ô∏è [FRONTEND] –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);

      if (result.result && Array.isArray(result.result)) {
        const successCount = result.result.filter((item: any) => item.updated === true).length;
        const errorCount = result.result.filter((item: any) => item.updated === false).length;
        
        console.log('üìä [FRONTEND] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', { 
          total: result.result.length,
          successCount, 
          errorCount 
        });

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result.result.forEach((item: any, index: number) => {
          if (item.updated) {
            console.log(`‚úÖ [FRONTEND] –¢–æ–≤–∞—Ä ${index + 1}: SKU ${item.offer_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
          } else {
            const errors = item.errors?.map((e: any) => e.message || e.code).join(', ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            console.log(`‚ùå [FRONTEND] –¢–æ–≤–∞—Ä ${index + 1}: SKU ${item.offer_id} –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω. –û—à–∏–±–∫–∏: ${errors}`);
          }
        });

        const isCompleteFailure = successCount === 0;
        const status = isCompleteFailure ? 'error' : 'success';

        await addSyncLog({
          marketplace: 'Wildberries',
          operation: 'stock_update',
          status: status,
          message: isCompleteFailure 
            ? `‚ùå –ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω (${errorCount} –æ—à–∏–±–æ–∫)`
            : `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
          executionTime,
          metadata: {
            updatedCount: successCount,
            errorCount: errorCount,
            productsCount: validProducts.length,
            filteredOutCount: products.length - validProducts.length,
            detailedResults: result.result,
            requestData: requestData
          }
        });

        if (isCompleteFailure) {
          console.error('üí• [FRONTEND] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
          const errorSummary = result.result.reduce((acc: any, item: any) => {
            if (!item.updated && item.errors) {
              item.errors.forEach((error: any) => {
                const code = error.code || 'UNKNOWN';
                acc[code] = (acc[code] || 0) + 1;
              });
            }
            return acc;
          }, {});
          
          console.error('üí• [FRONTEND] –¢–∏–ø—ã –æ—à–∏–±–æ–∫:', errorSummary);
          
          toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', {
            description: `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (${errorCount} —Ç–æ–≤–∞—Ä–æ–≤). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SKU –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.`
          });
          
          throw new Error(`–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –í—Å–µ ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏.`);
        } else {
          console.log('üéâ [FRONTEND] –£–°–ü–ï–•! –ß–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          
          toast.success(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ Wildberries —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`, {
            description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount} –∏–∑ ${result.result.length} —Ç–æ–≤–∞—Ä–æ–≤${errorCount > 0 ? `, –æ—à–∏–±–æ–∫: ${errorCount}` : ''}`
          });
        }
      } else if (result.error) {
        console.error('üí• [FRONTEND] Edge Function –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result.error);
        throw new Error(result.error);
      } else {
        console.error('üí• [FRONTEND] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', result);
        throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
      }
    } catch (error) {
      const executionTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error('üí• [FRONTEND] ===== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê =====');
      console.error('üí• [FRONTEND] –¢–∏–ø:', typeof error);
      console.error('üí• [FRONTEND] –ù–∞–∑–≤–∞–Ω–∏–µ:', error instanceof Error ? error.name : 'Unknown');
      console.error('üí• [FRONTEND] –°–æ–æ–±—â–µ–Ω–∏–µ:', errorMessage);
      console.error('üí• [FRONTEND] Stack:', error instanceof Error ? error.stack : 'No stack');
      console.error('üí• [FRONTEND] –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç:', error);
      
      await addSyncLog({
        marketplace: 'Wildberries',
        operation: 'stock_update',
        status: 'error',
        message: errorMessage,
        executionTime,
        metadata: { 
          error: errorMessage, 
          productsCount: products.length,
          errorDetails: error instanceof Error ? error.stack : undefined,
          errorType: error instanceof Error ? error.name : 'Unknown'
        }
      });

      if (!errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ') && !errorMessage.includes('–Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')) {
        toast.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries', {
          description: errorMessage
        });
      }
      throw error;
    }
  };

  return { updateStock };
};
