
import { toast } from 'sonner';
import { useSyncLogs } from './useSyncLogs';
import { useMarketplaceCredentials } from './useMarketplaceCredentials';

export const useWildberriesStockUpdate = () => {
  const { addSyncLog } = useSyncLogs();
  const { credentials } = useMarketplaceCredentials();

  const updateStock = async (products: any[]) => {
    const startTime = Date.now();
    
    console.log('üöÄ Starting Wildberries stock update with products:', products.length);
    console.log('üì¶ Products data sample:', products.slice(0, 3));
    
    try {
      const wbCreds = credentials['Wildberries'];
      
      if (!wbCreds?.api_key) {
        const errorMsg = 'Wildberries API key not found. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
        console.error('‚ùå', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('üîë Wildberries API key found, preparing request...');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø–∏–º —Ç–æ–≤–∞—Ä—ã —Å Wildberries SKU
      const validProducts = products.filter(p => {
        const hasWbSku = p.wildberries_sku || p.nm_id;
        if (!hasWbSku) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ${p.sku || p.offer_id} - –Ω–µ—Ç Wildberries SKU`);
        }
        return hasWbSku;
      });

      if (validProducts.length === 0) {
        console.log('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        toast.error('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤');
        return;
      }

      console.log(`üìã –¢–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${validProducts.length} –∏–∑ ${products.length}`);

      const requestData = { 
        stocks: validProducts.map(p => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º Wildberries SKU, –∞ –Ω–µ –æ–±—ã—á–Ω—ã–π SKU
          const wbSku = p.wildberries_sku || p.nm_id;
          const mappedProduct = {
            offer_id: String(wbSku), // Wildberries —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É
            stock: p.stock || p.currentStock || 0
          };
          console.log(`üìã Mapping product: ${p.sku || p.offer_id} -> WB SKU: ${wbSku}, stock: ${mappedProduct.stock}`);
          return mappedProduct;
        }),
        apiKey: wbCreds.api_key
      };

      console.log('üì§ Making request to Wildberries stock sync function...');
      console.log('üìù Request data summary:', {
        stocksCount: requestData.stocks.length,
        apiKeyLength: requestData.apiKey ? requestData.apiKey.length : 0,
        sampleStocks: requestData.stocks.slice(0, 3)
      });

      const response = await fetch('https://lpwvhyawvxibtuxfhitx.supabase.co/functions/v1/wildberries-stock-sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxwd3ZoeWF3dnhpYnR1eGZoaXR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MzIyOTUsImV4cCI6MjA2MjEwODI5NX0.-2aL1s3lUq4Oeos9jWoEd0Fn1g_-_oaQ_QWVEDByaOI`,
        },
        body: JSON.stringify(requestData),
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå HTTP error response:', errorText);
        
        // –ï—Å–ª–∏ 409 - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∞ –Ω–µ —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
        if (response.status === 409) {
          console.error('üö´ Wildberries API rejected the request - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ');
          
          await addSyncLog({
            marketplace: 'Wildberries',
            operation: 'stock_update',
            status: 'error',
            message: `–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries (${validProducts.length} —Ç–æ–≤–∞—Ä–æ–≤)`,
            executionTime: Date.now() - startTime,
            metadata: {
              updatedCount: 0,
              errorCount: validProducts.length,
              productsCount: validProducts.length,
              httpStatus: response.status,
              reason: 'All products not found in Wildberries catalog'
            }
          });

          toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            description: `–í—Å–µ —Ç–æ–≤–∞—Ä—ã (${validProducts.length}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Wildberries SKU –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.`
          });
          
          throw new Error(`–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries. HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        }
        
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const result = await response.json();
      console.log('üì® Response result:', result);
      
      const executionTime = Date.now() - startTime;

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
      if (result.result && Array.isArray(result.result)) {
        const successCount = result.result.filter((item: any) => item.updated === true).length;
        const errorCount = result.result.filter((item: any) => item.updated === false).length;
        
        console.log('üìä Update results:', { successCount, errorCount, total: result.result.length });

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ù–ï–¢ –£–°–ü–ï–®–ù–´–• –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - —ç—Ç–æ –æ—à–∏–±–∫–∞!
        const isCompleteFailure = successCount === 0;
        const status = isCompleteFailure ? 'error' : (successCount > 0 ? 'success' : 'error');

        await addSyncLog({
          marketplace: 'Wildberries',
          operation: 'stock_update',
          status: status,
          message: isCompleteFailure 
            ? `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries (${errorCount} –æ—à–∏–±–æ–∫)`
            : `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
          executionTime,
          metadata: {
            updatedCount: successCount,
            errorCount: errorCount,
            productsCount: validProducts.length,
            filteredOutCount: products.length - validProducts.length,
            details: result.result
          }
        });

        if (isCompleteFailure) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—á–µ–º—É —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          const notFoundItems = result.result.filter((item: any) => 
            item.updated === false && 
            item.errors?.some((err: any) => err.code === 'NotFound' || err.code === 'SKU_NOT_FOUND')
          );
          
          console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries:', notFoundItems.length);
          console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö WB SKU:', notFoundItems.slice(0, 5).map(item => item.offer_id));
          
          toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            description: `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries (${errorCount} —Ç–æ–≤–∞—Ä–æ–≤). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã Wildberries SKU.`
          });
          
          throw new Error(`–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries. –í—Å–µ ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.`);
        } else if (successCount > 0) {
          toast.success(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ Wildberries –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (${successCount} –∏–∑ ${result.result.length} —Ç–æ–≤–∞—Ä–æ–≤)`, {
            description: errorCount > 0 ? `–û—à–∏–±–æ–∫: ${errorCount}` : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
          });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
        if (errorCount > 0 && !isCompleteFailure) {
          const errorItems = result.result.filter((item: any) => item.updated === false);
          console.log('‚ùå –¢–æ–≤–∞—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏:', errorItems.slice(0, 10));
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
          const errorGroups = errorItems.reduce((acc: any, item: any) => {
            if (item.errors && item.errors.length > 0) {
              const errorCode = item.errors[0].code || 'UNKNOWN_ERROR';
              if (!acc[errorCode]) acc[errorCode] = [];
              acc[errorCode].push(item.offer_id);
            }
            return acc;
          }, {});

          Object.entries(errorGroups).forEach(([errorCode, offerIds]: [string, any]) => {
            console.log(`‚ùå ${errorCode}: ${offerIds.slice(0, 5).join(', ')}${offerIds.length > 5 ? '...' : ''}`);
          });
        }
      } else {
        throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
      }
    } catch (error) {
      const executionTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error('üí• Wildberries stock update error:', error);
      
      await addSyncLog({
        marketplace: 'Wildberries',
        operation: 'stock_update',
        status: 'error',
        message: errorMessage,
        executionTime,
        metadata: { error: errorMessage, productsCount: products.length }
      });

      console.error('üìù Logged error to sync logs');
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast.error –∑–¥–µ—Å—å –µ—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—à–µ
      if (!errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')) {
        toast.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries', {
          description: errorMessage
        });
      }
      throw error;
    }
  };

  return { updateStock };
};
