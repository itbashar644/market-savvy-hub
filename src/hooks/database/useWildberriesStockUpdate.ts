
import { toast } from 'sonner';
import { useSyncLogs } from './useSyncLogs';
import { useMarketplaceCredentials } from './useMarketplaceCredentials';

export const useWildberriesStockUpdate = () => {
  const { addSyncLog } = useSyncLogs();
  const { credentials } = useMarketplaceCredentials();

  const updateStock = async (products: any[]) => {
    const startTime = Date.now();
    
    console.log('üöÄ Starting Wildberries stock update with products:', products.length);
    console.log('üì¶ Products data sample:', products.slice(0, 3));
    
    try {
      const wbCreds = credentials['Wildberries'];
      
      if (!wbCreds?.api_key) {
        const errorMsg = 'Wildberries API key not found. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
        console.error('‚ùå', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('üîë Wildberries API key found, preparing request...');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø–∏–º —Ç–æ–≤–∞—Ä—ã —Å Wildberries SKU
      const validProducts = products.filter(p => {
        const hasWbSku = p.wildberries_sku || p.nm_id;
        if (!hasWbSku) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ${p.sku || p.offer_id} - –Ω–µ—Ç Wildberries SKU`);
        }
        return hasWbSku;
      });

      if (validProducts.length === 0) {
        console.log('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        toast.error('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries SKU –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤');
        return;
      }

      console.log(`üìã –¢–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${validProducts.length} –∏–∑ ${products.length}`);

      // –õ–æ–≥–∏—Ä—É–µ–º –ö–ê–ñ–î–´–ô SKU –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const allSkuDetails = validProducts.map(p => {
        const wbSku = p.wildberries_sku || p.nm_id;
        const stock = p.stock || p.currentStock || 0;
        const originalSku = p.sku || p.offer_id;
        console.log(`üìã WB SKU: ${wbSku}, –∏—Å—Ö–æ–¥–Ω—ã–π SKU: ${originalSku}, –æ—Å—Ç–∞—Ç–æ–∫: ${stock}, –Ω–∞–∑–≤–∞–Ω–∏–µ: ${p.name || 'N/A'}`);
        return { 
          wbSku, 
          originalSku, 
          stock, 
          productName: p.name || 'N/A',
          category: p.category || 'N/A'
        };
      });

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${allSkuDetails.length} SKU –≤ Wildberries API:`);
      allSkuDetails.forEach((item, index) => {
        console.log(`  ${index + 1}. SKU ${item.wbSku} (${item.originalSku}) - –æ—Å—Ç–∞—Ç–æ–∫: ${item.stock} - ${item.productName}`);
      });

      const requestData = { 
        stocks: validProducts.map(p => {
          const wbSku = p.wildberries_sku || p.nm_id;
          return {
            offer_id: String(wbSku),
            stock: p.stock || p.currentStock || 0
          };
        }),
        apiKey: wbCreds.api_key
      };

      console.log('üì§ Making request to Wildberries stock sync function...');

      const response = await fetch('https://lpwvhyawvxibtuxfhitx.supabase.co/functions/v1/wildberries-stock-sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxwd3ZoeWF3dnhpYnR1eGZoaXR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MzIyOTUsImV4cCI6MjA2MjEwODI5NX0.-2aL1s3lUq4Oeos9jWoEd0Fn1g_-_oaQ_QWVEDByaOI`,
        },
        body: JSON.stringify(requestData),
      });

      console.log('üì° Response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå HTTP error response:', errorText);
        
        if (response.status === 409) {
          console.error('üö´ Wildberries API rejected the request - —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ');
          
          // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö SKU –ø—Ä–∏ 409 –æ—à–∏–±–∫–µ
          const skuResults = allSkuDetails.map(sku => {
            console.log(`‚ùå SKU ${sku.wbSku} (–∏—Å—Ö–æ–¥–Ω—ã–π: ${sku.originalSku}): NotFound –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries - ${sku.productName}`);
            return {
              wbSku: sku.wbSku,
              originalSku: sku.originalSku,
              productName: sku.productName,
              stock: sku.stock,
              status: 'NotFound',
              error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries'
            };
          });
          
          await addSyncLog({
            marketplace: 'Wildberries',
            operation: 'stock_update',
            status: 'error',
            message: `–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries (${validProducts.length} —Ç–æ–≤–∞—Ä–æ–≤)`,
            executionTime: Date.now() - startTime,
            metadata: {
              updatedCount: 0,
              errorCount: validProducts.length,
              productsCount: validProducts.length,
              httpStatus: response.status,
              allSkuDetails: allSkuDetails,
              skuResults: skuResults,
              reason: 'All products not found in Wildberries catalog',
              detailedError: errorText
            }
          });

          toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            description: `–í—Å–µ —Ç–æ–≤–∞—Ä—ã (${validProducts.length}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SKU.`
          });
          
          throw new Error(`–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries. HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        }
        
        throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
      }

      const result = await response.json();
      console.log('üì® Response result:', result);
      
      const executionTime = Date.now() - startTime;

      if (result.result && Array.isArray(result.result)) {
        const successCount = result.result.filter((item: any) => item.updated === true).length;
        const errorCount = result.result.filter((item: any) => item.updated === false).length;
        
        console.log('üìä Update results:', { successCount, errorCount, total: result.result.length });

        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
        const skuResults = result.result.map((item: any) => {
          const skuDetail = allSkuDetails.find(s => s.wbSku === item.offer_id);
          if (item.updated) {
            console.log(`‚úÖ SKU ${item.offer_id} (–∏—Å—Ö–æ–¥–Ω—ã–π: ${skuDetail?.originalSku}): —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –æ—Å—Ç–∞—Ç–æ–∫ ${skuDetail?.stock} - ${skuDetail?.productName}`);
            return {
              wbSku: item.offer_id,
              originalSku: skuDetail?.originalSku || 'N/A',
              productName: skuDetail?.productName || 'N/A',
              stock: skuDetail?.stock || 0,
              status: 'updated',
              error: null
            };
          } else {
            const errors = item.errors?.map((e: any) => e.code || e.message).join(', ') || 'Unknown error';
            console.log(`‚ùå SKU ${item.offer_id} (–∏—Å—Ö–æ–¥–Ω—ã–π: ${skuDetail?.originalSku}): –æ—à–∏–±–∫–∞ - ${errors} - ${skuDetail?.productName}`);
            return {
              wbSku: item.offer_id,
              originalSku: skuDetail?.originalSku || 'N/A', 
              productName: skuDetail?.productName || 'N/A',
              stock: skuDetail?.stock || 0,
              status: 'error',
              error: errors
            };
          }
        });

        const isCompleteFailure = successCount === 0;
        const status = isCompleteFailure ? 'error' : 'success';

        await addSyncLog({
          marketplace: 'Wildberries',
          operation: 'stock_update',
          status: status,
          message: isCompleteFailure 
            ? `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries (${errorCount} –æ—à–∏–±–æ–∫)`
            : `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
          executionTime,
          metadata: {
            updatedCount: successCount,
            errorCount: errorCount,
            productsCount: validProducts.length,
            filteredOutCount: products.length - validProducts.length,
            allSkuDetails: allSkuDetails,
            skuResults: skuResults,
            detailedResults: result.result,
            details: result.result
          }
        });

        if (isCompleteFailure) {
          toast.error('‚ùå –û—Å—Ç–∞—Ç–∫–∏ Wildberries –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            description: `–ù–ò –û–î–ò–ù —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries (${errorCount} —Ç–æ–≤–∞—Ä–æ–≤). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.`
          });
          
          throw new Error(`–ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Wildberries. –í—Å–µ ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.`);
        } else {
          toast.success(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ Wildberries –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (${successCount} –∏–∑ ${result.result.length} —Ç–æ–≤–∞—Ä–æ–≤)`, {
            description: errorCount > 0 ? `–û—à–∏–±–æ–∫: ${errorCount}` : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
          });
        }
      } else {
        throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
      }
    } catch (error) {
      const executionTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error('üí• Wildberries stock update error:', error);
      
      await addSyncLog({
        marketplace: 'Wildberries',
        operation: 'stock_update',
        status: 'error',
        message: errorMessage,
        executionTime,
        metadata: { 
          error: errorMessage, 
          productsCount: products.length,
          errorDetails: error instanceof Error ? error.stack : undefined
        }
      });

      if (!errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')) {
        toast.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Wildberries', {
          description: errorMessage
        });
      }
      throw error;
    }
  };

  return { updateStock };
};
