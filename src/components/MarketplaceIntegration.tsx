import React, { useState } from 'react';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { useInventory, useMarketplaceCredentials } from '@/hooks/useDatabase';
import { supabase } from '@/integrations/supabase/client';
import { FunctionsHttpError } from '@supabase/supabase-js';

import MarketplaceCard from './marketplace/MarketplaceCard';
import MarketplaceSettings from './marketplace/MarketplaceSettings';
import SyncLogs from './marketplace/SyncLogs';
import UpdateRules from './marketplace/UpdateRules';
import ProductsListModal from './marketplace/ProductsListModal';
import SyncResultModal from './marketplace/SyncResultModal';
import { Marketplace, SyncLog } from '@/types/marketplace';

const MarketplaceIntegration = () => {
  const { toast } = useToast();
  const { inventory } = useInventory();
  const { credentials } = useMarketplaceCredentials();
  
  const ozonCreds = credentials['Ozon'] || {};
  const wbCreds = credentials['Wildberries'] || {};

  const [autoSync, setAutoSync] = useState(true);
  const [syncInProgress, setSyncInProgress] = useState(false);
  const [syncingMarketplace, setSyncingMarketplace] = useState<string | null>(null);
  const [checkingConnection, setCheckingConnection] = useState<string | null>(null);
  const [showProductsModal, setShowProductsModal] = useState(false);
  const [selectedMarketplace, setSelectedMarketplace] = useState<string>('');
  const [showSyncResultModal, setShowSyncResultModal] = useState(false);
  const [syncResults, setSyncResults] = useState<any[]>([]);

  const marketplaces: Marketplace[] = [
    {
      name: 'Ozon',
      status: ozonCreds.api_key && ozonCreds.client_id ? 'connected' : 'not-configured',
      lastSync: '2024-01-15 14:30',
      products: 156,
      orders: 23,
      color: 'bg-blue-600',
      icon: 'üõçÔ∏è'
    },
    {
      name: 'Wildberries',
      status: wbCreds.api_key ? 'connected' : 'not-configured',
      lastSync: '2024-01-15 14:25',
      products: 142,
      orders: 18,
      color: 'bg-purple-600',
      icon: 'üõí'
    },
    {
      name: '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç',
      status: 'disconnected',
      lastSync: '–ù–∏–∫–æ–≥–¥–∞',
      products: 0,
      orders: 0,
      color: 'bg-yellow-600',
      icon: 'üè™'
    }
  ];

  const syncLogs: SyncLog[] = [
    {
      id: 1,
      marketplace: 'Ozon',
      action: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤',
      status: 'success',
      timestamp: '2024-01-15 14:30:15',
      details: '–û–±–Ω–æ–≤–ª–µ–Ω–æ 45 —Ç–æ–≤–∞—Ä–æ–≤'
    },
    {
      id: 2,
      marketplace: 'Wildberries',
      action: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
      status: 'success',
      timestamp: '2024-01-15 14:25:32',
      details: '–ó–∞–≥—Ä—É–∂–µ–Ω–æ 12 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤'
    },
    {
      id: 3,
      marketplace: 'Ozon',
      action: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω',
      status: 'error',
      timestamp: '2024-01-15 14:20:45',
      details: '–û—à–∏–±–∫–∞ API: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á'
    }
  ];

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries
  const checkWildberriesConnectionDirect = async (apiKey: string) => {
    try {
      console.log('Direct connection check to Wildberries...');
      
      // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      const endpoints = [
        'https://suppliers-api.wildberries.ru/api/v3/warehouses',
        'https://suppliers-api.wildberries.ru/public/api/v1/info'
      ];

      for (const endpoint of endpoints) {
        try {
          const response = await fetch(endpoint, {
            method: 'GET',
            headers: {
              'Authorization': apiKey,
              'Accept': 'application/json',
            },
            mode: 'cors'
          });

          console.log(`Response from ${endpoint}:`, response.status);
          
          if (response.ok || response.status === 401 || response.status === 403) {
            // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401/403, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API –¥–æ—Å—Ç—É–ø–µ–Ω
            if (response.status === 401 || response.status === 403) {
              return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' };
            }
            return { success: true, message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' };
          }
        } catch (err) {
          console.log(`Error with ${endpoint}:`, err);
          continue;
        }
      }
      
      throw new Error('–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    } catch (error: any) {
      console.error('Direct connection error:', error);
      return { 
        success: false, 
        error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Wildberries. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS –∏–ª–∏ —Å–µ—Ç—å—é.' 
      };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Wildberries
  const syncWildberriesDirect = async (stocks: any[], apiKey: string) => {
    try {
      console.log('Direct sync to Wildberries with stocks:', stocks);

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
      const warehousesResponse = await fetch('https://suppliers-api.wildberries.ru/api/v3/warehouses', {
        method: 'GET',
        headers: {
          'Authorization': apiKey,
          'Accept': 'application/json',
        },
        mode: 'cors'
      });

      if (!warehousesResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: ${warehousesResponse.status}`);
      }

      const warehouses = await warehousesResponse.json();
      if (!warehouses || warehouses.length === 0) {
        throw new Error('–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      const warehouseId = warehouses[0].id;
      console.log('Using warehouse:', warehouseId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      const stocksPayload = {
        stocks: stocks.map(item => ({
          sku: item.offer_id,
          amount: item.stock,
          warehouseId: warehouseId
        }))
      };

      const stocksResponse = await fetch(`https://suppliers-api.wildberries.ru/api/v3/stocks/${warehouseId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': apiKey,
        },
        body: JSON.stringify(stocksPayload),
        mode: 'cors'
      });

      if (!stocksResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: ${stocksResponse.status}`);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        result: stocks.map(item => ({
          offer_id: item.offer_id,
          updated: true,
          errors: []
        }))
      };

    } catch (error: any) {
      console.error('Direct sync error:', error);
      return {
        result: stocks.map(item => ({
          offer_id: item.offer_id,
          updated: false,
          errors: [{
            code: 'DIRECT_SYNC_ERROR',
            message: error.message
          }]
        }))
      };
    }
  };

  const handleSync = async (marketplace: string) => {
    console.log(`Starting sync with ${marketplace}`);
    console.log('Current inventory:', inventory);

    if (marketplace === 'Wildberries') {
      if (!wbCreds.api_key) {
        toast({
          title: "–ù–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Wildberries.",
          variant: "destructive",
        });
        return;
      }

      if (!inventory || inventory.length === 0) {
        toast({
          title: "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
          description: "–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Wildberries.",
          variant: "destructive",
        });
        return;
      }

      setSyncInProgress(true);
      setSyncingMarketplace(marketplace);

      const stocks = inventory.map(item => ({
        offer_id: item.sku,
        stock: item.currentStock,
      }));

      console.log('Syncing stocks to Wildberries:', stocks);

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        const result = await syncWildberriesDirect(stocks, wbCreds.api_key);
        const failedUpdates = result.result.filter((r: { updated: boolean; }) => !r.updated);

        if (failedUpdates.length > 0) {
          console.error('Failed Wildberries updates:', failedUpdates);
          setSyncResults(result.result);
          setSelectedMarketplace(marketplace);
          setShowSyncResultModal(true);
          toast({
            title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Wildberries",
            description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${failedUpdates.length} —Ç–æ–≤–∞—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`,
            variant: "destructive"
          });
        } else {
          toast({
            title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Wildberries –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description: `–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${stocks.length} —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`,
          });
        }

      } catch (error: any) {
        console.error('Error syncing with Wildberries:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Wildberries",
          description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
          variant: "destructive"
        });
      } finally {
        setSyncInProgress(false);
        setSyncingMarketplace(null);
      }
      return;
    }

    if (marketplace !== 'Ozon') {
      toast({
        title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        description: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ${marketplace} –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.`,
        variant: "default",
      });
      return;
    }

    console.log('Ozon credentials check:', ozonCreds);

    if (!ozonCreds.api_key || !ozonCreds.client_id) {
      toast({
        title: "–ù–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á –∏–ª–∏ Client ID",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á –∏ Client ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Ozon.",
        variant: "destructive",
      });
      return;
    }

    if (!ozonCreds.warehouse_id) {
        toast({
            title: "–ù–µ —É–∫–∞–∑–∞–Ω Warehouse ID",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ Warehouse ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Ozon.",
            variant: "destructive",
        });
        return;
    }

    if (!inventory || inventory.length === 0) {
      toast({
        title: "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Ozon.",
        variant: "destructive",
      });
      return;
    }

    setSyncInProgress(true);
    setSyncingMarketplace(marketplace);

    const stocks = inventory.map(item => ({
      offer_id: item.sku,
      stock: item.currentStock,
    }));

    console.log('Sending Ozon request with:', {
      hasApiKey: !!ozonCreds.api_key,
      hasClientId: !!ozonCreds.client_id,
      hasWarehouseId: !!ozonCreds.warehouse_id,
      warehouseId: ozonCreds.warehouse_id,
      stocksCount: stocks.length,
      stocksSample: stocks.slice(0, 3)
    });

    try {
      const { data, error } = await supabase.functions.invoke('ozon-stock-sync', {
        body: { 
          stocks, 
          warehouseId: ozonCreds.warehouse_id,
          apiKey: ozonCreds.api_key,
          clientId: ozonCreds.client_id,
        },
      });

      console.log('Supabase function response:', { data, error });

      if (error) throw error;
      
      const ozonResult = data.result;
      const successUpdates = ozonResult.filter((r: { updated: boolean; }) => r.updated);
      const failedUpdates = ozonResult.filter((r: { updated: boolean; }) => !r.updated);

      console.log('Sync results:', {
        total: ozonResult.length,
        success: successUpdates.length,
        failed: failedUpdates.length
      });

      if (failedUpdates.length > 0) {
        console.error('Failed Ozon updates:', failedUpdates);
        setSyncResults(ozonResult);
        setSelectedMarketplace(marketplace);
        setShowSyncResultModal(true);
        
        if (successUpdates.length > 0) {
          toast({
            title: "–ß–∞—Å—Ç–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Ozon",
            description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${successUpdates.length} —Ç–æ–≤–∞—Ä–æ–≤, ${failedUpdates.length} —Å –æ—à–∏–±–∫–∞–º–∏. –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.`,
            variant: "default"
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon",
            description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${failedUpdates.length} —Ç–æ–≤–∞—Ä–æ–≤. –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.`,
            variant: "destructive"
          });
        }
      } else {
        toast({
          title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: `–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${successUpdates.length} —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`,
        });
      }

    } catch (error: any) {
      console.error('Error syncing with Ozon:', error);
      let description = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";

      if (error instanceof FunctionsHttpError) {
        try {
          const errorJson = await error.context.json();
          description = errorJson.error || JSON.stringify(errorJson);
        } catch {
          description = error.context.statusText || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.';
        }
      } else {
        description = error.message;
      }

      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon",
        description,
        variant: "destructive"
      });
    } finally {
      setSyncInProgress(false);
      setSyncingMarketplace(null);
    }
  };

  const handleCheckConnection = async (marketplace: string) => {
    setCheckingConnection(marketplace);
    let apiKey, clientId;

    try {
      if (marketplace === 'Ozon') {
        apiKey = ozonCreds.api_key;
        clientId = ozonCreds.client_id;
        if (!apiKey || !clientId) {
          toast({
            title: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –∏ Client ID –¥–ª—è Ozon.",
            variant: "destructive",
          });
          setCheckingConnection(null);
          return;
        }

        const { data, error } = await supabase.functions.invoke('ozon-connection-check', {
          body: { 
            apiKey, 
            clientId
          },
        });

        if (error) throw error;

        if (data.success) {
          toast({
            title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon",
            description: data.message,
            variant: "default",
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon",
            description: data.error,
            variant: "destructive",
          });
        }
      } else if (marketplace === 'Wildberries') {
        const apiKey = wbCreds.api_key;
        if (!apiKey) {
          toast({
            title: "–ù–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –¥–ª—è Wildberries.",
            variant: "destructive",
          });
          setCheckingConnection(null);
          return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const result = await checkWildberriesConnectionDirect(apiKey);

        if (result.success) {
          toast({
            title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries",
            description: result.message,
            variant: "default",
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries",
            description: result.error,
            variant: "destructive",
          });
        }
      } else {
        toast({
          title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
          description: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${marketplace} –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.`,
          variant: "default",
        });
      }
    } catch (error: any) {
      console.error('Error checking connection:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
        variant: "destructive"
      });
    } finally {
      setCheckingConnection(null);
    }
  };

  const handleShowProducts = (marketplace: string) => {
    setSelectedMarketplace(marketplace);
    setShowProductsModal(true);
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏</h1>
          <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-600">–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
          <Switch
            checked={autoSync}
            onCheckedChange={setAutoSync}
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {marketplaces.map((marketplace) => (
          <MarketplaceCard 
            key={marketplace.name}
            marketplace={marketplace}
            onSync={handleSync}
            onShowProducts={handleShowProducts}
            syncInProgress={syncInProgress}
            syncingMarketplace={syncingMarketplace}
          />
        ))}
      </div>

      <Tabs defaultValue="settings" className="space-y-6">
        <TabsList>
          <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</TabsTrigger>
          <TabsTrigger value="logs">–õ–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="rules">–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</TabsTrigger>
        </TabsList>

        <TabsContent value="settings" className="space-y-6">
          <MarketplaceSettings 
            handleCheckConnection={handleCheckConnection}
            checkingConnection={checkingConnection}
          />
        </TabsContent>

        <TabsContent value="logs" className="space-y-6">
          <SyncLogs logs={syncLogs} />
        </TabsContent>

        <TabsContent value="rules" className="space-y-6">
          <UpdateRules />
        </TabsContent>
      </Tabs>

      <ProductsListModal
        isOpen={showProductsModal}
        onClose={() => setShowProductsModal(false)}
        marketplace={selectedMarketplace}
      />

      <SyncResultModal
        isOpen={showSyncResultModal}
        onClose={() => setShowSyncResultModal(false)}
        marketplace={selectedMarketplace}
        results={syncResults}
      />
    </div>
  );
};

export default MarketplaceIntegration;
