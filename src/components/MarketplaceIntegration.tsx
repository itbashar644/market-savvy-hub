import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  RefreshCw, 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Settings,
  Save,
  ExternalLink,
  Upload,
  Download
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useInventory, useMarketplaceCredentials } from '@/hooks/useDatabase';
import { supabase } from '@/integrations/supabase/client';
import { FunctionsHttpError } from '@supabase/supabase-js';

const MarketplaceIntegration = () => {
  const { toast } = useToast();
  const { inventory } = useInventory();
  const { credentials, loading: credentialsLoading, saving, updateCredentialField, saveCredentials } = useMarketplaceCredentials();
  
  const ozonCreds = credentials['Ozon'] || {};
  const wbCreds = credentials['Wildberries'] || {};

  const [autoSync, setAutoSync] = useState(true);
  const [syncInProgress, setSyncInProgress] = useState(false);
  const [syncingMarketplace, setSyncingMarketplace] = useState<string | null>(null);
  const [checkingConnection, setCheckingConnection] = useState<string | null>(null);

  const marketplaces = [
    {
      name: 'Ozon',
      status: 'connected',
      lastSync: '2024-01-15 14:30',
      products: 156,
      orders: 23,
      color: 'bg-blue-600',
      icon: 'üõçÔ∏è'
    },
    {
      name: 'Wildberries',
      status: 'connected',
      lastSync: '2024-01-15 14:25',
      products: 142,
      orders: 18,
      color: 'bg-purple-600',
      icon: 'üõí'
    },
    {
      name: '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç',
      status: 'disconnected',
      lastSync: '–ù–∏–∫–æ–≥–¥–∞',
      products: 0,
      orders: 0,
      color: 'bg-yellow-600',
      icon: 'üè™'
    }
  ];

  const syncLogs = [
    {
      id: 1,
      marketplace: 'Ozon',
      action: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤',
      status: 'success',
      timestamp: '2024-01-15 14:30:15',
      details: '–û–±–Ω–æ–≤–ª–µ–Ω–æ 45 —Ç–æ–≤–∞—Ä–æ–≤'
    },
    {
      id: 2,
      marketplace: 'Wildberries',
      action: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
      status: 'success',
      timestamp: '2024-01-15 14:25:32',
      details: '–ó–∞–≥—Ä—É–∂–µ–Ω–æ 12 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤'
    },
    {
      id: 3,
      marketplace: 'Ozon',
      action: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω',
      status: 'error',
      timestamp: '2024-01-15 14:20:45',
      details: '–û—à–∏–±–∫–∞ API: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á'
    }
  ];

  const handleSync = async (marketplace: string) => {
    if (marketplace !== 'Ozon') {
      toast({
        title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        description: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ${marketplace} –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.`,
        variant: "default",
      });
      return;
    }

    if (!ozonCreds.warehouse_id) {
      toast({
        title: "–ù–µ —É–∫–∞–∑–∞–Ω Warehouse ID",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ Warehouse ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Ozon.",
        variant: "destructive",
      });
      return;
    }

    setSyncInProgress(true);
    setSyncingMarketplace(marketplace);

    const stocks = inventory.map(item => ({
      offer_id: item.sku,
      stock: item.currentStock,
    }));

    try {
      const { data, error } = await supabase.functions.invoke('ozon-stock-sync', {
        body: { stocks, warehouseId: ozonCreds.warehouse_id },
      });

      if (error) throw error;
      
      const ozonResult = data.result;
      const failedUpdates = ozonResult.filter((r: { updated: boolean; }) => !r.updated);

      if (failedUpdates.length > 0) {
        console.error('Failed Ozon updates:', failedUpdates);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon",
          description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${failedUpdates.length} —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.`,
          variant: "destructive"
        });
      } else {
        toast({
          title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: `–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${stocks.length} —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`,
        });
      }

    } catch (error: any) {
      console.error('Error syncing with Ozon:', error);
      let description = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";

      if (error instanceof FunctionsHttpError) {
        try {
          const errorJson = await error.context.json();
          description = errorJson.error || JSON.stringify(errorJson);
        } catch {
          description = error.context.statusText || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.';
        }
      } else {
        description = error.message;
      }

      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon",
        description,
        variant: "destructive"
      });
    } finally {
      setSyncInProgress(false);
      setSyncingMarketplace(null);
    }
  };

  const handleCheckConnection = async (marketplace: string) => {
    setCheckingConnection(marketplace);
    let apiKey, clientId;

    try {
      if (marketplace === 'Ozon') {
        apiKey = ozonCreds.api_key;
        clientId = ozonCreds.client_id;
        if (!apiKey || !clientId) {
          toast({
            title: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –∏ Client ID –¥–ª—è Ozon.",
            variant: "destructive",
          });
          setCheckingConnection(null);
          return;
        }

        const { data, error } = await supabase.functions.invoke('ozon-connection-check', {
          body: { 
            apiKey, 
            clientId
          },
        });

        if (error) throw error;

        if (data.success) {
          toast({
            title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon",
            description: data.message,
            variant: "default",
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon",
            description: data.error,
            variant: "destructive",
          });
        }
      } else if (marketplace === 'Wildberries') {
        apiKey = wbCreds.api_key;
        if (!apiKey) {
          toast({
            title: "–ù–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –¥–ª—è Wildberries.",
            variant: "destructive",
          });
          setCheckingConnection(null);
          return;
        }

        const { data, error } = await supabase.functions.invoke('wildberries-connection-check', {
          body: { apiKey },
        });

        if (error) throw error;

        if (data.success) {
          toast({
            title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries",
            description: data.message,
            variant: "default",
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries",
            description: data.error,
            variant: "destructive",
          });
        }
      } else {
        toast({
          title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
          description: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${marketplace} –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.`,
          variant: "default",
        });
      }
    } catch (error: any) {
      console.error('Error checking connection:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
        variant: "destructive"
      });
    } finally {
      setCheckingConnection(null);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return <CheckCircle className="w-5 h-5 text-green-600" />;
      case 'disconnected': return <XCircle className="w-5 h-5 text-red-600" />;
      case 'error': return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      default: return <XCircle className="w-5 h-5 text-gray-600" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'connected': return '–ü–æ–¥–∫–ª—é—á–µ–Ω';
      case 'disconnected': return '–û—Ç–∫–ª—é—á–µ–Ω';
      case 'error': return '–û—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏</h1>
          <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-600">–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
          <Switch
            checked={autoSync}
            onCheckedChange={setAutoSync}
          />
        </div>
      </div>

      {/* Marketplace Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {marketplaces.map((marketplace, index) => (
          <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className={`p-2 rounded-lg ${marketplace.color} text-white text-xl`}>
                    {marketplace.icon}
                  </div>
                  <div>
                    <CardTitle className="text-lg">{marketplace.name}</CardTitle>
                    <div className="flex items-center space-x-2 mt-1">
                      {getStatusIcon(marketplace.status)}
                      <span className="text-sm text-gray-600">
                        {getStatusText(marketplace.status)}
                      </span>
                    </div>
                  </div>
                </div>
                <Button size="sm" variant="outline">
                  <Settings className="w-4 h-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–¢–æ–≤–∞—Ä—ã:</span>
                  <Badge variant="outline">{marketplace.products}</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–ó–∞–∫–∞–∑—ã:</span>
                  <Badge variant="outline">{marketplace.orders}</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
                  <span className="text-xs text-gray-500">{marketplace.lastSync}</span>
                </div>
                
                <div className="flex space-x-2 pt-2">
                  <Button 
                    size="sm" 
                    className="flex-1"
                    onClick={() => handleSync(marketplace.name)}
                    disabled={syncInProgress || marketplace.status === 'disconnected'}
                  >
                    <RefreshCw className={`w-4 h-4 mr-1 ${syncInProgress && syncingMarketplace === marketplace.name ? 'animate-spin' : ''}`} />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Tabs defaultValue="settings" className="space-y-6">
        <TabsList>
          <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</TabsTrigger>
          <TabsTrigger value="logs">–õ–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="rules">–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</TabsTrigger>
        </TabsList>

        <TabsContent value="settings" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Ozon Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üõçÔ∏è</span>
                  <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ozon</span>
                </CardTitle>
                <CardDescription>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ozon</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-700">API –∫–ª—é—á</label>
                  <Input
                    type="password"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Ozon"
                    value={ozonCreds.api_key || ''}
                    onChange={(e) => updateCredentialField('Ozon', 'api_key', e.target.value)}
                    disabled={credentialsLoading || saving}
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">Client ID</label>
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ Client ID"
                    value={ozonCreds.client_id || ''}
                    onChange={(e) => updateCredentialField('Ozon', 'client_id', e.target.value)}
                    disabled={credentialsLoading || saving}
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">Warehouse ID</label>
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ Warehouse ID Ozon"
                    value={ozonCreds.warehouse_id || ''}
                    onChange={(e) => updateCredentialField('Ozon', 'warehouse_id', e.target.value)}
                    disabled={credentialsLoading || saving}
                  />
                </div>
                <div className="flex space-x-2">
                  <Button
                    className="flex-1"
                    onClick={() => handleCheckConnection('Ozon')}
                    disabled={!ozonCreds.api_key || !ozonCreds.client_id || checkingConnection === 'Ozon' || saving || credentialsLoading}
                  >
                    <RefreshCw className={`w-4 h-4 mr-2 ${checkingConnection === 'Ozon' ? 'animate-spin' : ''}`} />
                    {checkingConnection === 'Ozon' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                  </Button>
                  <Button
                    className="flex-1"
                    variant="outline"
                    onClick={() => saveCredentials('Ozon')}
                    disabled={saving || credentialsLoading}
                  >
                    <Save className={`w-4 h-4 mr-2 ${saving ? 'animate-spin' : ''}`} />
                    {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Wildberries Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üõí</span>
                  <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wildberries</span>
                </CardTitle>
                <CardDescription>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Wildberries</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-700">API –∫–ª—é—á</label>
                  <Input
                    type="password"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Wildberries"
                    value={wbCreds.api_key || ''}
                    onChange={(e) => updateCredentialField('Wildberries', 'api_key', e.target.value)}
                    disabled={credentialsLoading || saving}
                  />
                </div>
                <div className="flex space-x-2">
                   <Button
                    className="flex-1"
                    onClick={() => handleCheckConnection('Wildberries')}
                    disabled={!wbCreds.api_key || checkingConnection === 'Wildberries' || saving || credentialsLoading}
                  >
                    <RefreshCw className={`w-4 h-4 mr-2 ${checkingConnection === 'Wildberries' ? 'animate-spin' : ''}`} />
                    {checkingConnection === 'Wildberries' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                  </Button>
                   <Button
                    className="flex-1"
                    variant="outline"
                    onClick={() => saveCredentials('Wildberries')}
                    disabled={saving || credentialsLoading}
                  >
                    <Save className={`w-4 h-4 mr-2 ${saving ? 'animate-spin' : ''}`} />
                    {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="logs" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</CardTitle>
              <CardDescription>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {syncLogs.map((log) => (
                  <div key={log.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center space-x-4">
                      <div className={`p-2 rounded-full ${
                        log.status === 'success' ? 'bg-green-100' : 'bg-red-100'
                      }`}>
                        {log.status === 'success' ? 
                          <CheckCircle className="w-4 h-4 text-green-600" /> :
                          <XCircle className="w-4 h-4 text-red-600" />
                        }
                      </div>
                      <div>
                        <p className="font-medium">{log.marketplace} - {log.action}</p>
                        <p className="text-sm text-gray-600">{log.details}</p>
                      </div>
                    </div>
                    <span className="text-sm text-gray-500">{log.timestamp}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rules" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</CardTitle>
              <CardDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">–û–±–Ω–æ–≤–ª—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∫–∞–∂–¥—ã–µ:</label>
                  <select className="w-full p-2 border rounded-md">
                    <option>15 –º–∏–Ω—É—Ç</option>
                    <option>30 –º–∏–Ω—É—Ç</option>
                    <option>1 —á–∞—Å</option>
                    <option>3 —á–∞—Å–∞</option>
                  </select>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">–û–±–Ω–æ–≤–ª—è—Ç—å —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ:</label>
                  <select className="w-full p-2 border rounded-md">
                    <option>1 —á–∞—Å</option>
                    <option>3 —á–∞—Å–∞</option>
                    <option>6 —á–∞—Å–æ–≤</option>
                    <option>12 —á–∞—Å–æ–≤</option>
                  </select>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <Switch defaultChecked />
                <span className="text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</span>
              </div>
              
              <div className="flex items-center space-x-2">
                <Switch defaultChecked />
                <span className="text-sm">–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</span>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default MarketplaceIntegration;
