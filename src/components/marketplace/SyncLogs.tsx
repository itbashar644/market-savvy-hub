
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, AlertTriangle, RefreshCw, Terminal } from 'lucide-react';
import { DetailedSyncLog } from '@/hooks/useDatabase';

interface SyncLogsProps {
  logs: DetailedSyncLog[];
}

interface EdgeFunctionLog {
  timestamp: number;
  level: string;
  event_message: string;
  event_type: string;
  function_id: string;
}

const SyncLogs: React.FC<SyncLogsProps> = ({ logs }) => {
  const [edgeLogs, setEdgeLogs] = useState<EdgeFunctionLog[]>([]);
  const [loadingLogs, setLoadingLogs] = useState(false);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'error':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'warning':
        return <AlertTriangle className="w-4 h-4 text-yellow-600" />;
      default:
        return <CheckCircle className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStatusBg = (status: string) => {
    switch (status) {
      case 'success':
        return 'bg-green-100';
      case 'error':
        return 'bg-red-100';
      case 'warning':
        return 'bg-yellow-100';
      default:
        return 'bg-gray-100';
    }
  };

  const formatTimestamp = (timestamp?: string | number) => {
    if (!timestamp) return '';
    const date = typeof timestamp === 'number' ? new Date(timestamp / 1000) : new Date(timestamp);
    return date.toLocaleString('ru-RU');
  };

  const getLogLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'error':
        return 'text-red-600 bg-red-50';
      case 'warn':
      case 'warning':
        return 'text-yellow-600 bg-yellow-50';
      case 'info':
        return 'text-blue-600 bg-blue-50';
      case 'debug':
        return 'text-gray-600 bg-gray-50';
      default:
        return 'text-gray-800 bg-gray-100';
    }
  };

  const loadEdgeFunctionLogs = async () => {
    setLoadingLogs(true);
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Supabase API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Edge —Ñ—É–Ω–∫—Ü–∏–π
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
      const mockLogs: EdgeFunctionLog[] = [
        {
          timestamp: Date.now() * 1000,
          level: 'log',
          event_message: 'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: SKU 2041589280948 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—à–∏–±–æ–∫ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          event_type: 'Log',
          function_id: 'wildberries-stock-sync'
        },
        {
          timestamp: Date.now() * 1000 - 1000,
          level: 'log',
          event_message: '‚ùå Detailed 409 error: NotFound - —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries',
          event_type: 'Log',
          function_id: 'wildberries-stock-sync'
        },
        {
          timestamp: Date.now() * 1000 - 2000,
          level: 'log',
          event_message: 'üì§ Stock update response status: 409',
          event_type: 'Log',
          function_id: 'wildberries-stock-sync'
        },
        {
          timestamp: Date.now() * 1000 - 3000,
          level: 'log',
          event_message: '‚úÖ –°–∫–ª–∞–¥ 7963 –Ω–∞–π–¥–µ–Ω: –°–∫–ª–∞–¥ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 73752',
          event_type: 'Log',
          function_id: 'wildberries-stock-sync'
        },
        {
          timestamp: Date.now() * 1000 - 4000,
          level: 'log',
          event_message: 'Syncing stocks to Wildberries for 141 items',
          event_type: 'Log',
          function_id: 'wildberries-stock-sync'
        }
      ];
      
      setEdgeLogs(mockLogs);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ Edge —Ñ—É–Ω–∫—Ü–∏–π:', error);
    } finally {
      setLoadingLogs(false);
    }
  };

  useEffect(() => {
    loadEdgeFunctionLogs();
  }, []);

  const highlightSKU = (message: string, sku: string = '2041589280948') => {
    return message.replace(new RegExp(sku, 'g'), `<mark class="bg-yellow-200 px-1 rounded">${sku}</mark>`);
  };

  return (
    <div className="space-y-4">
      <Tabs defaultValue="sync-logs" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="sync-logs">–õ–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="edge-logs">Edge Function –õ–æ–≥–∏</TabsTrigger>
        </TabsList>

        <TabsContent value="sync-logs" className="space-y-4">
          {logs.length > 0 ? logs.map((log) => (
            <div key={log.id} className="flex items-center justify-between p-4 border rounded-lg">
              <div className="flex items-center space-x-4">
                <div className={`p-2 rounded-full ${getStatusBg(log.status)}`}>
                  {getStatusIcon(log.status)}
                </div>
                <div>
                  <p className="font-medium">{log.marketplace} - {log.operation}</p>
                  <p className="text-sm text-gray-600">{log.message}</p>
                  {log.executionTime && (
                    <p className="text-xs text-gray-500">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {log.executionTime}–º—Å</p>
                  )}
                  {log.metadata && (
                    <div className="text-xs text-gray-500 mt-1">
                      {log.metadata.updatedCount !== undefined && (
                        <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {log.metadata.updatedCount} | </span>
                      )}
                      {log.metadata.errorCount !== undefined && (
                        <span>–û—à–∏–±–æ–∫: {log.metadata.errorCount}</span>
                      )}
                    </div>
                  )}
                </div>
              </div>
              <span className="text-sm text-gray-500">{formatTimestamp(log.timestamp)}</span>
            </div>
          )) : (
            <p className="text-sm text-gray-500 text-center py-8">–ù–µ—Ç –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
          )}
        </TabsContent>

        <TabsContent value="edge-logs" className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Terminal className="w-4 h-4" />
              <h3 className="text-lg font-semibold">–õ–æ–≥–∏ Edge Functions</h3>
            </div>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={loadEdgeFunctionLogs}
              disabled={loadingLogs}
            >
              {loadingLogs ? (
                <RefreshCw className="w-4 h-4 animate-spin mr-2" />
              ) : (
                <RefreshCw className="w-4 h-4 mr-2" />
              )}
              –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏
            </Button>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="text-base">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SKU 2041589280948</CardTitle>
              <CardDescription>
                –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Wildberries
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Badge variant="outline" className="bg-blue-50">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ API</Badge>
                  <span className="text-sm">SKU –¥–æ–±–∞–≤–ª–µ–Ω —Å –æ—Å—Ç–∞—Ç–∫–æ–º 3</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant="destructive">NotFound</Badge>
                  <span className="text-sm">–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ Wildberries</span>
                </div>
                <div className="text-xs text-gray-600 mt-2">
                  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –õ–ö, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SKU
                </div>
              </div>
            </CardContent>
          </Card>

          <ScrollArea className="h-[400px] w-full border rounded-md p-4">
            <div className="space-y-2">
              {edgeLogs.length > 0 ? edgeLogs.map((log, index) => (
                <div key={index} className="border-l-2 border-gray-200 pl-4 py-2">
                  <div className="flex items-center justify-between mb-1">
                    <Badge variant="outline" className={getLogLevelColor(log.level)}>
                      {log.level.toUpperCase()}
                    </Badge>
                    <span className="text-xs text-gray-500">
                      {formatTimestamp(log.timestamp)}
                    </span>
                  </div>
                  <div 
                    className="text-sm font-mono whitespace-pre-wrap break-words"
                    dangerouslySetInnerHTML={{ 
                      __html: highlightSKU(log.event_message) 
                    }}
                  />
                  {log.function_id && (
                    <div className="text-xs text-gray-400 mt-1">
                      Function: {log.function_id}
                    </div>
                  )}
                </div>
              )) : (
                <div className="text-center text-gray-500 py-8">
                  <Terminal className="w-8 h-8 mx-auto mb-2 opacity-50" />
                  <p>–ù–µ—Ç –ª–æ–≥–æ–≤ Edge —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                  <p className="text-xs mt-1">–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤</p>
                </div>
              )}
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SyncLogs;
